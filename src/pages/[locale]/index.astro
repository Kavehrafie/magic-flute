---
import { getCollection } from "astro:content";
import { Button } from "@/components/ui/button";
import Layout from "@/layouts/Layout.astro";
import PodcastTrigger from "@/components/react/PodcastTrigger";
import { Image } from "astro:assets";
import {
  PlayIcon,
  ChevronRightIcon,
  ExternalLinkIcon,
  InfoIcon,
  BookmarkIcon,
} from "lucide-react";
import { DEFAULT_LOCALE, useTranslations } from "../../lib/i18n";
import EventWrapper from "../../components/react/EventWrapper";

const { locale = DEFAULT_LOCALE, modal } = Astro.params;
const podcasts = await getCollection(
  "podcasts",
  entry => entry.data.draft !== true && entry.data.locale === locale
);

const { SITE } = import.meta.env;
const events = await getCollection(
  "events",
  entry => new Date(entry.data.eventDate) >= new Date() && entry.data.locale === locale
);
const sortedEvents = events.sort(
  (a, b) => new Date(b.data.eventDate) - new Date(a.data.eventDate)
);

const {  remarkPluginFrontmatter } =
  await sortedEvents[0]?.render() || {};


const request = Astro.request;
const url = new URL(request.url);
const params = new URLSearchParams(url.search);
const {
  geo: { city },
} = Astro.locals.netlify.context;

console.log(Astro.locals.netlify);

---

<Layout {locale}>
  <div
    class="fullwidth grid grid-cols-2 grid-rows-[1fr_auto] items-center justify-center gap-4"
  >
    {sortedEvents[0] && <Image
      id="hero-image"
      class="col-span-2 col-start-1 row-start-1 min-h-svh object-cover"
      src={sortedEvents[0].data.featuredImage.src}
      width={2000}
      height={1000}
      alt="juan ogorman"
      slot="featured"
    />}

    <p
      class="breakout col-span-2 row-start-2 text-center text-xs"
      slot="featured"
    >
      {sortedEvents[0] && sortedEvents[0].data.featuredImage.alt}
    </p>

    <section
      id="hero-section"
      class="z-[1] col-span-2 col-start-1 row-start-1 p-4 md:col-span-1 md:col-start-2 md:p-0 rtl:font-fa-serif"
    >
      {
        sortedEvents[0] &&
      <p class="text-lg font-black">
        {useTranslations(locale)("session")} |
        {
          sortedEvents[0] && sortedEvents[0].data.eventDate.toLocaleDateString(locale, {
            year: "numeric",
            month: "long",
            day: "numeric",
          })
        }
      </p>
      <h2 class="text-5xl font-bold">{sortedEvents[0] && sortedEvents[0].data.title}</h2>

      <a href="?modal=event" >
      <Button className="max-w-42 my-4 ml-0 mr-auto uppercase" client:visible
         >
        {useTranslations(locale)("action.add-to-calendar")}
      </Button>
      </a>
      }
    </section>
  </div>
  <main class="grid-container fullwidth min-h-svh py-6">
    <div class="grid grid-cols-1 space-y-4">
      {
        podcasts.map(post => (
          <section class="cast-card">
            <Image
              class="cast-card--image max-h-80 md:max-h-none w-full object-cover"
              src={`${post.data.featuredImage.src}?format=auto&width=${post.data.featuredImage.width}&height=${post.data.featuredImage.height}`}
              width={post.data.featuredImage.width}
              height={post.data.featuredImage.height}
              alt={post.data.title}
            />

            <PodcastTrigger
              audio={{ src: post.data.url, title: post.data.title }}
              client:load
              className="cast-card--action opacity-0 hover:opacity-100 transition-opacity w-full h-full bg-foreground/15  flex justify-center items-center"
            >
              <span class="rounded-full bg-background/50 p-4">
                <PlayIcon className="w-10 h-10" />
              </span>
            </PodcastTrigger>

            <a
              class="cast-card--title"
              href={`/${locale}/podcasts/${post.slug}`}
            >
              <h2 class="px-4 py-6 text-4xl rtl:font-fa-sans rtl:font-bold">
                {post.data.title}
              </h2>
            </a>

            <p class="cast-card--description">
              {post.data.abstract}
            </p>
          </section>
        ))
      }
    </div>
  </main>
  {
    params.get("modal") && (
      <EventWrapper
        links={{
          reading: remarkPluginFrontmatter.readingLink,
          meeting: remarkPluginFrontmatter.meetingLink
        }}
        title={remarkPluginFrontmatter.title}
        {locale}
        client:load >
        <div class="py-4">
          {remarkPluginFrontmatter?.abstract}
        </div>
      </EventWrapper>
    )
  }
</Layout>

<script is:inline>
  function updateOpacityOnScroll() {
    const heroImage = document.getElementById("hero-image");
    const heroSection = document.getElementById("hero-section");
    const scrollPosition =
      window.pageYOffset || document.documentElement.scrollTop;
    const desiredOpacity = 1 - scrollPosition / 400; // Adjust the divisor to control the rate of opacity change
    if (document.getElementById("hero-image")) {
      heroImage.style.opacity = Math.max(0.4, Math.min(1, desiredOpacity)); // Ensure opacity stays between 0 and 1
    }
    if (document.getElementById("hero-section")) {
      heroSection.style.transform = `translateY(${-desiredOpacity * 80 + 80}px)`;
    }
  }

  let scrollPosition = 0;
  // Add the scroll event listener to the window
  window.addEventListener("scroll", updateOpacityOnScroll);

  document.addEventListener("astro:before-preparation", event => {
    console.log("astro:before-preparation");
    scrollPosition = window.pageYOffset || document.documentElement.scrollTop;
    //   window.removeEventListener("scroll", updateOpacityOnScroll);
  });
  // document.addEventListener('astro:page-load', (event) => {

  document.addEventListener("astro:after-swap", event => {
    console.log("astro:after-swap");
    window.scrollTo(0, scrollPosition);
    //   window.addEventListener("scroll", updateOpacityOnScroll);
  });

  //     updateOpacityOnScroll();

  // })
</script>

<style>
  .cast-card {
    @apply m-2 grid items-center gap-2 overflow-hidden rounded-2xl border lg:gap-4 rtl:flex-row-reverse;
    grid-template-areas:
      "image image"
      "title title"
      "desc desc";
    max-height: 500px;
    @screen md {
      grid-template-areas:
        "title image"
        "desc image";
      grid-template-rows: auto 1fr;
      grid-template-columns: 1fr minmax(300px, 400px);
    }
  }

  .cast-card--description {
    @apply px-4 py-6 mb-auto mt-0;
    grid-area: desc;
  }

  .cast-card--title {
    @apply mt-auto mb-0;
    grid-area: title;
      text-align: center;
      @apply md:text-left md:rtl:text-right;
  }

  .cast-card--image,
  .cast-card--action {
    grid-area: image;
  }
</style>
